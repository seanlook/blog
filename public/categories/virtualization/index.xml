<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Virtualization on Sean&#39;s Note</title>
    <link>http://localhost:1313/categories/virtualization/</link>
    <description>Recent content in Virtualization on Sean&#39;s Note</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Apr 2015 15:21:25 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/virtualization/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用vmware vconverter从物理机迁移系统到虚拟机P2V（多图）</title>
      <link>http://localhost:1313/2015/04/vmware-vcenter-vconverter/</link>
      <pubDate>Sun, 05 Apr 2015 15:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2015/04/vmware-vcenter-vconverter/</guid>
      <description>&lt;p&gt;本文完整记录了如何从物理服务器，保持所有环境配置信息，纹丝不动的迁移到虚拟机上，俗称 P2V 。采用的工具是VMware公司的 &lt;code&gt;VMware vcenter vconverter standalone&lt;/code&gt;，它支持将windows和linux操作系统用作源，可以执行若干转换任务：&lt;/p&gt;</description>
    </item>
    <item>
      <title>在Mac在Mac/win7下上使用Vagrant打造本地开发环境</title>
      <link>http://localhost:1313/2015/03/vagrant/</link>
      <pubDate>Wed, 25 Mar 2015 11:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2015/03/vagrant/</guid>
      <description>&lt;h1 id=&#34;1-vagrant介绍&#34;&gt;1. vagrant介绍&lt;/h1&gt;
&lt;h2 id=&#34;11-vagrant能做什么&#34;&gt;1.1 vagrant能做什么&lt;/h2&gt;
&lt;p&gt;做Web开发（java/php/python/ruby&amp;hellip;）少不了要在本地搭建好开发环境，虽然说目前各种脚本/语言都有对应的Windows版，甚至是一键安装包，但很多时候和Windows环境的兼容性（如配置文件、编译的模块）并不是那么好，麻烦的问题是实际部署的环境通常是Linux，常常还要面临着开发和部署环境不一致，上线前还要大量的调试。而如果让每个开发人员都自己去搭建本地环境，安装虚拟机、下载ISO镜像、选择规格安装创建vm、安装OS、配置，会耗费非常多的时间，如果是团队开发应该要尽量保持每个人的运行环境一致。此时vagrant正式你所需要的。不适用正式环境部署。&lt;/p&gt;</description>
    </item>
    <item>
      <title>在ubuntu上部署Kubernetes管理docker集群示例</title>
      <link>http://localhost:1313/2015/02/docker-kubernetes-deploy2/</link>
      <pubDate>Sat, 07 Feb 2015 13:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2015/02/docker-kubernetes-deploy2/</guid>
      <description>&lt;p&gt;本文通过实际操作来演示Kubernetes的使用，因为环境有限，集群部署在本地3个ubuntu上，主要包括如下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;部署环境介绍，以及Kubernetes集群逻辑架构&lt;/li&gt;
&lt;li&gt;安装部署Open vSwitch跨机器容器通信工具&lt;/li&gt;
&lt;li&gt;安装部署Etcd和Kubernetes的各大组件&lt;/li&gt;
&lt;li&gt;演示Kubernetes管理容器和服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于 Kubernetes 系统架构及组件介绍见&lt;a href=&#34;http://xgknight.com/2015/02/03/docker-kubernetes-arch-introduction/&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>开源容器集群管理系统Kubernetes架构及组件介绍</title>
      <link>http://localhost:1313/2015/02/docker-kubernetes-arch-introduction/</link>
      <pubDate>Tue, 03 Feb 2015 13:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2015/02/docker-kubernetes-arch-introduction/</guid>
      <description>&lt;p&gt;本文来源于Infoq的一篇文章（见参考部分），并在难懂的地方自己理解的基础上做了修改。实际在ubuntu上部署 kubernetes 操作另见 &lt;a href=&#34;http://xgknight.com/2015/02/07/docker-kubernetes-deploy2/&#34;&gt;文章&lt;/a&gt; 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Together we will ensure that Kubernetes is a strong and open container management framework for any application and in any environment, whether in a private, public or hybrid cloud.  &amp;ndash;Urs Hölzle, Google&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker集中化web界面管理平台shipyard</title>
      <link>http://localhost:1313/2014/12/docker-shipyard-centralized-management-webui/</link>
      <pubDate>Mon, 29 Dec 2014 13:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/12/docker-shipyard-centralized-management-webui/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://shipyard-project.com/&#34;&gt;Shipyard&lt;/a&gt;（&lt;a href=&#34;https://github.com/shipyard/shipyard&#34;&gt;github&lt;/a&gt;）是建立在docker集群管理工具&lt;a href=&#34;https://github.com/citadel/citadel&#34;&gt;Citadel&lt;/a&gt;之上的可以管理容器、主机等资源的web图形化工具。包括&lt;a href=&#34;https://github.com/shipyard/shipyard&#34;&gt;core&lt;/a&gt;和&lt;a href=&#34;https://github.com/shipyard/shipyard-extensions&#34;&gt;extension&lt;/a&gt;两个版本，core即shipyard主要是把多个 Docker host上的 containers 统一管理（支持跨越多个host），extension即shipyard-extensions添加了应用路由和负载均衡、集中化日志、部署等。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【转&#43;改】Docker核心技术预览</title>
      <link>http://localhost:1313/2014/12/docker-core-technology-preview/</link>
      <pubDate>Thu, 18 Dec 2014 13:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/12/docker-core-technology-preview/</guid>
      <description>&lt;p&gt;本文简单介绍docker使用到的部分核心技术，但不做深入探究，因为每一个技术都是一个独立的项目，有机会再分别详细介绍。
来源地址：http://www.infoq.com/cn/articles/docker-core-technology-preview&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker简介</title>
      <link>http://localhost:1313/2014/12/docker-introduction/</link>
      <pubDate>Thu, 18 Dec 2014 11:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/12/docker-introduction/</guid>
      <description>&lt;h1 id=&#34;1-docker是什么&#34;&gt;1. docker是什么&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker is an open-source engine that automates the deployment of any application as a lightweight, portable, self-sufficient container that will run virtually anywhere.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;是 PaaS 提供商&lt;a href=&#34;https://www.dotcloud.com/&#34;&gt;dotCloud&lt;/a&gt;开源的一个基于 LXC 的高级容器引擎， &lt;a href=&#34;https://github.com/docker/docker&#34;&gt;源代码&lt;/a&gt;托管在 Github 上, 基于go语言并遵从Apache2.0协议开源。Docker近期非常火热，无论是从 GitHub 上的代码活跃度，还是Redhat宣布在&lt;a href=&#34;http://server.cnw.com.cn/server-os/htm2014/20140616_303249.shtml&#34;&gt;RHEL7中正式支持Docker&lt;/a&gt;，都给业界一个信号，这是一项创新型的技术解决方案。就连 Google 公司的 Compute Engine 也支持 docker 在其之上运行，国内“BAT”先锋企业百度Baidu App Engine(BAE)平台也是&lt;a href=&#34;http://blog.docker.com/2013/12/baidu-using-docker-for-its-paas/&#34;&gt;以Docker作为其PaaS云基础&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dockerfile指令详解</title>
      <link>http://localhost:1313/2014/11/dockerfile-introduction/</link>
      <pubDate>Mon, 17 Nov 2014 15:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/11/dockerfile-introduction/</guid>
      <description>&lt;p&gt;Docker可以从&lt;code&gt;Dockerfile&lt;/code&gt;中一步一步的读取指令来自动的创建镜像，常使用Dockerfile来创建用户自定义的镜像。格式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Comment
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INSTRUCTION arguments
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;虽然前面的指令大小写不敏感，但习惯性的还是建议大写。docker是严格按照顺序（&lt;code&gt;#&lt;/code&gt;注释起来的忽略）运行指令的。
下面逐个来介绍几个必要的指令。&lt;/p&gt;</description>
    </item>
    <item>
      <title>搭建docker内网私服（docker-registry with nginx&amp;ssl on centos）</title>
      <link>http://localhost:1313/2014/11/deploy-private-docker-registry-with-nginx-ssl/</link>
      <pubDate>Thu, 13 Nov 2014 20:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/11/deploy-private-docker-registry-with-nginx-ssl/</guid>
      <description>&lt;p&gt;主要思路：
&lt;img alt=&#34;docker-registry-deploy&#34; loading=&#34;lazy&#34; src=&#34;http://github.com/seanlook/sean-notes-comment/raw/main/static/docker-registry-deploy.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-docker-registry-说明&#34;&gt;1. Docker Registry 说明&lt;/h2&gt;
&lt;p&gt;关于如何创建和使用本地仓库，其实已经有很多文章介绍了。因为docker技术正处于发展和完善阶段，所以有些文章要么内容已经过时，要么给出了错误的配置，导致无法正常创建仓库。本文记录的是个人完整的搭建过程，&lt;code&gt;docker version&lt;/code&gt;为1.1.2。&lt;/p&gt;</description>
    </item>
    <item>
      <title>docker常用管理命令（下）</title>
      <link>http://localhost:1313/2014/11/docker-command-best-use-2/</link>
      <pubDate>Wed, 05 Nov 2014 16:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/11/docker-command-best-use-2/</guid>
      <description>&lt;p&gt;本文承接&lt;a href=&#34;http://xgknight.com/2014/10/31/docker-command-best-use-1/&#34;&gt;docker专题(2)：docker常用管理命令（上）&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;1-开启停止重启containerstartstoprestart&#34;&gt;1. 开启/停止/重启container（start/stop/restart）&lt;/h3&gt;
&lt;p&gt;容器可以通过&lt;code&gt;run&lt;/code&gt;新建一个来运行，也可以重新&lt;code&gt;start&lt;/code&gt;已经停止的container，但&lt;code&gt;start&lt;/code&gt;不能够再指定容器启动时运行的指令，因为docker只能有一个前台进程。
容器stop（或&lt;code&gt;Ctrl+D&lt;/code&gt;）时，会在保存当前容器的状态之后退出，下次start时保有上次关闭时更改。而且每次进入&lt;code&gt;attach&lt;/code&gt;进去的界面是一样的，与第一次run启动或commit提交的时刻相同。&lt;/p&gt;</description>
    </item>
    <item>
      <title>docker如何创建一个运行后台进程的容器并同时提供shell终端</title>
      <link>http://localhost:1313/2014/11/docker-run-container-with-shell-daemon_process/</link>
      <pubDate>Mon, 03 Nov 2014 20:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/11/docker-run-container-with-shell-daemon_process/</guid>
      <description>&lt;p&gt;只看标题还不是很明显，本文实现docker的这样一种比较常用的功能：通过&lt;code&gt;docker run&lt;/code&gt;启动一个容器后，容器中已经运行了一个后台进程（这里以监听80端口的nginx为例），同时进入一个shell终端可供操作，而不受限于只能在前台运行nginx与运行shell终端之间的一种。这个例子实现了，那么其他类似的运行多任务docker就可以以此类推。另外本文还提供了一种在docker容器内部安装软件（&lt;code&gt;vim&lt;/code&gt;）的方法，对于定制自己需要的镜像大有帮助。
你可能需要先阅读&lt;a href=&#34;hhttp://xgknight.com/2014/10/31/docker-command-best-use-1/&#34;&gt;docker专题(2)：docker常用管理命令（上）&lt;/a&gt;、&lt;a href=&#34;http://xgknight.com/2014/11/05/docker-command-best-use-2/&#34;&gt;docker专题(2)：docker常用管理命令（下）&lt;/a&gt;来理解更多。&lt;/p&gt;</description>
    </item>
    <item>
      <title>误删vSphere虚拟机.vmdk文件的恢复</title>
      <link>http://localhost:1313/2014/10/vsphere-recover-from-missing-vmdk/</link>
      <pubDate>Tue, 28 Oct 2014 15:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/10/vsphere-recover-from-missing-vmdk/</guid>
      <description>&lt;h2 id=&#34;1-错误描述&#34;&gt;1. 错误描述&lt;/h2&gt;
&lt;p&gt;在vSphere上，一次重启虚拟服务器时出现启动不了，提示找不到vmdk虚拟磁盘文件：
&lt;img alt=&#34;vmdk_not_found&#34; loading=&#34;lazy&#34; src=&#34;http://github.com/seanlook/sean-notes-comment/raw/main/static/vmdk_not_found.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-原因分析&#34;&gt;2. 原因分析&lt;/h2&gt;
&lt;p&gt;查看这台虚拟服务器的摘要信息，对比datastore上其他可用的虚拟机，发现损坏的服务器上确实缺少一个vmdk磁盘文件，但是可以看见一个50G的&lt;code&gt;xxx-flat.vmdk&lt;/code&gt;文件；而正常的服务器只有&lt;code&gt;xxx.vmdk&lt;/code&gt;，没有&lt;code&gt;xxx-flat.vmdk&lt;/code&gt;，关机之后两个文件都存在，而且真实的磁盘容量从vmdk转移到了&lt;code&gt;xxx-flat.vmdk&lt;/code&gt;。
虚拟主机在运行的时候，实际在使用的是&lt;code&gt;xxx-flat.vmdk&lt;/code&gt;，然而&lt;code&gt;xxx.vmdk&lt;/code&gt;是可以同时被删除的，才导致了问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>在 CentOS 6.x上安装 docker.io成功</title>
      <link>http://localhost:1313/2014/10/docker-installed-centos6-successfully/</link>
      <pubDate>Sun, 26 Oct 2014 19:45:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/10/docker-installed-centos6-successfully/</guid>
      <description>&lt;p&gt;docker是什么就不多说了，见&lt;a href=&#34;http://xgknight.com/2014/12/18/docker-introduction/&#34;&gt;docker基础原理介绍&lt;/a&gt;。
docker容器最早受到RHEL完善的支持是从最近的CentOS 7.0开始的，官方说明是只能运行于64位架构平台，内核版本为2.6.32-431及以上（即&amp;gt;=CentOS 6.5，运行docker时实际提示3.8.0及以上），升级内核请参考&lt;a href=&#34;http://xgknight.com/2014/10/24/upgrade-centos6_kernel-to-3.10.x/&#34;&gt;CentOS 6.x 内核升级（2.6.32 -&amp;gt; 3.10.58）过程记录&lt;/a&gt;
需要注意的是CentOS 6.5与7.0的安装是有一点点不同的，CentOS-6上docker的安装包叫docker-io，并且来源于Fedora epel库，这个仓库维护了大量的没有包含在发行版中的软件，所以先要安装EPEL，而CentOS-7的docker直接包含在官方镜像源的Extras仓库（CentOS-Base.repo下的[extras]节enable=1启用）。前提是都需要联网，具体安装过程如下。
###1. 禁用selinux###&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
