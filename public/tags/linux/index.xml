<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on Sean&#39;s Note</title>
    <link>http://localhost:1313/tags/linux/</link>
    <description>Recent content in Linux on Sean&#39;s Note</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Jun 2015 16:32:49 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>解答一个关于日志系统的思路</title>
      <link>http://localhost:1313/2015/06/gongshi-logsystem-elk-preview/</link>
      <pubDate>Tue, 09 Jun 2015 16:32:49 +0000</pubDate>
      <guid>http://localhost:1313/2015/06/gongshi-logsystem-elk-preview/</guid>
      <description>&lt;p&gt;在一个群里看到一个面试题，试着去解答一下，毕竟正好花时间了解过日志这方面的内容。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;希望能达到的使用场景：&lt;/p&gt;
&lt;p&gt;在写业务逻辑时也能进行结构化的log, 并且log被转移到一个数据库， 一个UI前端以这个log数据库为支持， 可以可视化各种指标， 并且保留未来可以对指标进行alarm的可能性&lt;/p&gt;</description>
    </item>
    <item>
      <title>仿豆丁网文件在线浏览解决方案搭建</title>
      <link>http://localhost:1313/2015/05/pdf2swf-preview/</link>
      <pubDate>Wed, 13 May 2015 01:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2015/05/pdf2swf-preview/</guid>
      <description>&lt;p&gt;在公司OA和CRM系统遇到要实现在线查看word/jpg等文件的功能，按照开发小组的要求搭建了一套解决方案：OpenOffice + JodConvertor  + SWFTool+ FlexPaper，其中OpenOffice + JodConvertor用于将文档转化为PDF格式文档，SwfTool用于将PDF转化为SWF文档，FlexPaper用于展示。使用这个解决方案的最大好处就是跨平台且较为简单。&lt;/p&gt;</description>
    </item>
    <item>
      <title>配置 Oracle 11gR2 在 CentOS6 上开机自启动</title>
      <link>http://localhost:1313/2015/04/oracle_db_autostart_with_linux/</link>
      <pubDate>Sat, 11 Apr 2015 15:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2015/04/oracle_db_autostart_with_linux/</guid>
      <description>&lt;h2 id=&#34;修改配置&#34;&gt;修改配置&lt;/h2&gt;
&lt;p&gt;要达到oracle随开机自启动，一般使用11g自带的dbstart脚本：&lt;code&gt;$ORACLE_HOME/bin/dbstart&lt;/code&gt;，但要先修改&lt;code&gt;/etc/oratab&lt;/code&gt;的内容，将N改成Y，表示允许实例自启动，假如有2个实例要启动，再写一行：&lt;/p&gt;</description>
    </item>
    <item>
      <title>rpm或yum安装软件提示error-rpmts_HdrFromFdno-key-ID-BAD</title>
      <link>http://localhost:1313/2015/03/rpm-yum-recover/</link>
      <pubDate>Mon, 02 Mar 2015 01:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2015/03/rpm-yum-recover/</guid>
      <description>&lt;h1 id=&#34;问题&#34;&gt;问题&lt;/h1&gt;
&lt;p&gt;在 CentOS 6.4 x86_64 上无论通过yum或rpm安装软件时，出现以下错误：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;yum&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;glibc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;devel&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rpmts_HdrFromFdno&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Header&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;V3&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;RSA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SHA1&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Signature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ID&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c105b9de&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;BAD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;Problem&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;opening&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;el6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x86_64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;rpm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;分析&#34;&gt;分析&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;rpm -ivh&lt;/code&gt;单独去安装软件也提示上面的错误。&lt;code&gt;rpm -qa&lt;/code&gt; 无法列出系统中安装过的软件包，但许多库文件和软件命令是存在的。也尝试过&lt;code&gt;rpm --rebuilddb&lt;/code&gt;来重建数据库，但情况依然没有得到改善（centos官网说千万不要在系统broken的情况下rebuilddb，不然有可能变成destroy）&lt;/p&gt;</description>
    </item>
    <item>
      <title>在ubuntu上部署Kubernetes管理docker集群示例</title>
      <link>http://localhost:1313/2015/02/docker-kubernetes-deploy2/</link>
      <pubDate>Sat, 07 Feb 2015 13:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2015/02/docker-kubernetes-deploy2/</guid>
      <description>&lt;p&gt;本文通过实际操作来演示Kubernetes的使用，因为环境有限，集群部署在本地3个ubuntu上，主要包括如下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;部署环境介绍，以及Kubernetes集群逻辑架构&lt;/li&gt;
&lt;li&gt;安装部署Open vSwitch跨机器容器通信工具&lt;/li&gt;
&lt;li&gt;安装部署Etcd和Kubernetes的各大组件&lt;/li&gt;
&lt;li&gt;演示Kubernetes管理容器和服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于 Kubernetes 系统架构及组件介绍见&lt;a href=&#34;http://xgknight.com/2015/02/03/docker-kubernetes-arch-introduction/&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>开源容器集群管理系统Kubernetes架构及组件介绍</title>
      <link>http://localhost:1313/2015/02/docker-kubernetes-arch-introduction/</link>
      <pubDate>Tue, 03 Feb 2015 13:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2015/02/docker-kubernetes-arch-introduction/</guid>
      <description>&lt;p&gt;本文来源于Infoq的一篇文章（见参考部分），并在难懂的地方自己理解的基础上做了修改。实际在ubuntu上部署 kubernetes 操作另见 &lt;a href=&#34;http://xgknight.com/2015/02/07/docker-kubernetes-deploy2/&#34;&gt;文章&lt;/a&gt; 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Together we will ensure that Kubernetes is a strong and open container management framework for any application and in any environment, whether in a private, public or hybrid cloud.  &amp;ndash;Urs Hölzle, Google&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker集中化web界面管理平台shipyard</title>
      <link>http://localhost:1313/2014/12/docker-shipyard-centralized-management-webui/</link>
      <pubDate>Mon, 29 Dec 2014 13:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/12/docker-shipyard-centralized-management-webui/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://shipyard-project.com/&#34;&gt;Shipyard&lt;/a&gt;（&lt;a href=&#34;https://github.com/shipyard/shipyard&#34;&gt;github&lt;/a&gt;）是建立在docker集群管理工具&lt;a href=&#34;https://github.com/citadel/citadel&#34;&gt;Citadel&lt;/a&gt;之上的可以管理容器、主机等资源的web图形化工具。包括&lt;a href=&#34;https://github.com/shipyard/shipyard&#34;&gt;core&lt;/a&gt;和&lt;a href=&#34;https://github.com/shipyard/shipyard-extensions&#34;&gt;extension&lt;/a&gt;两个版本，core即shipyard主要是把多个 Docker host上的 containers 统一管理（支持跨越多个host），extension即shipyard-extensions添加了应用路由和负载均衡、集中化日志、部署等。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【转&#43;改】Docker核心技术预览</title>
      <link>http://localhost:1313/2014/12/docker-core-technology-preview/</link>
      <pubDate>Thu, 18 Dec 2014 13:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/12/docker-core-technology-preview/</guid>
      <description>&lt;p&gt;本文简单介绍docker使用到的部分核心技术，但不做深入探究，因为每一个技术都是一个独立的项目，有机会再分别详细介绍。
来源地址：http://www.infoq.com/cn/articles/docker-core-technology-preview&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker简介</title>
      <link>http://localhost:1313/2014/12/docker-introduction/</link>
      <pubDate>Thu, 18 Dec 2014 11:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/12/docker-introduction/</guid>
      <description>&lt;h1 id=&#34;1-docker是什么&#34;&gt;1. docker是什么&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker is an open-source engine that automates the deployment of any application as a lightweight, portable, self-sufficient container that will run virtually anywhere.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;是 PaaS 提供商&lt;a href=&#34;https://www.dotcloud.com/&#34;&gt;dotCloud&lt;/a&gt;开源的一个基于 LXC 的高级容器引擎， &lt;a href=&#34;https://github.com/docker/docker&#34;&gt;源代码&lt;/a&gt;托管在 Github 上, 基于go语言并遵从Apache2.0协议开源。Docker近期非常火热，无论是从 GitHub 上的代码活跃度，还是Redhat宣布在&lt;a href=&#34;http://server.cnw.com.cn/server-os/htm2014/20140616_303249.shtml&#34;&gt;RHEL7中正式支持Docker&lt;/a&gt;，都给业界一个信号，这是一项创新型的技术解决方案。就连 Google 公司的 Compute Engine 也支持 docker 在其之上运行，国内“BAT”先锋企业百度Baidu App Engine(BAE)平台也是&lt;a href=&#34;http://blog.docker.com/2013/12/baidu-using-docker-for-its-paas/&#34;&gt;以Docker作为其PaaS云基础&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dockerfile指令详解</title>
      <link>http://localhost:1313/2014/11/dockerfile-introduction/</link>
      <pubDate>Mon, 17 Nov 2014 15:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/11/dockerfile-introduction/</guid>
      <description>&lt;p&gt;Docker可以从&lt;code&gt;Dockerfile&lt;/code&gt;中一步一步的读取指令来自动的创建镜像，常使用Dockerfile来创建用户自定义的镜像。格式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Comment
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INSTRUCTION arguments
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;虽然前面的指令大小写不敏感，但习惯性的还是建议大写。docker是严格按照顺序（&lt;code&gt;#&lt;/code&gt;注释起来的忽略）运行指令的。
下面逐个来介绍几个必要的指令。&lt;/p&gt;</description>
    </item>
    <item>
      <title>docker常用管理命令（下）</title>
      <link>http://localhost:1313/2014/11/docker-command-best-use-2/</link>
      <pubDate>Wed, 05 Nov 2014 16:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/11/docker-command-best-use-2/</guid>
      <description>&lt;p&gt;本文承接&lt;a href=&#34;http://xgknight.com/2014/10/31/docker-command-best-use-1/&#34;&gt;docker专题(2)：docker常用管理命令（上）&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;1-开启停止重启containerstartstoprestart&#34;&gt;1. 开启/停止/重启container（start/stop/restart）&lt;/h3&gt;
&lt;p&gt;容器可以通过&lt;code&gt;run&lt;/code&gt;新建一个来运行，也可以重新&lt;code&gt;start&lt;/code&gt;已经停止的container，但&lt;code&gt;start&lt;/code&gt;不能够再指定容器启动时运行的指令，因为docker只能有一个前台进程。
容器stop（或&lt;code&gt;Ctrl+D&lt;/code&gt;）时，会在保存当前容器的状态之后退出，下次start时保有上次关闭时更改。而且每次进入&lt;code&gt;attach&lt;/code&gt;进去的界面是一样的，与第一次run启动或commit提交的时刻相同。&lt;/p&gt;</description>
    </item>
    <item>
      <title>docker如何创建一个运行后台进程的容器并同时提供shell终端</title>
      <link>http://localhost:1313/2014/11/docker-run-container-with-shell-daemon_process/</link>
      <pubDate>Mon, 03 Nov 2014 20:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/11/docker-run-container-with-shell-daemon_process/</guid>
      <description>&lt;p&gt;只看标题还不是很明显，本文实现docker的这样一种比较常用的功能：通过&lt;code&gt;docker run&lt;/code&gt;启动一个容器后，容器中已经运行了一个后台进程（这里以监听80端口的nginx为例），同时进入一个shell终端可供操作，而不受限于只能在前台运行nginx与运行shell终端之间的一种。这个例子实现了，那么其他类似的运行多任务docker就可以以此类推。另外本文还提供了一种在docker容器内部安装软件（&lt;code&gt;vim&lt;/code&gt;）的方法，对于定制自己需要的镜像大有帮助。
你可能需要先阅读&lt;a href=&#34;hhttp://xgknight.com/2014/10/31/docker-command-best-use-1/&#34;&gt;docker专题(2)：docker常用管理命令（上）&lt;/a&gt;、&lt;a href=&#34;http://xgknight.com/2014/11/05/docker-command-best-use-2/&#34;&gt;docker专题(2)：docker常用管理命令（下）&lt;/a&gt;来理解更多。&lt;/p&gt;</description>
    </item>
    <item>
      <title>记一次错误卸载软件包导致Linux系统崩溃的修复解决过程</title>
      <link>http://localhost:1313/2014/11/one-troubleshooting-for-centos-corrupt/</link>
      <pubDate>Mon, 03 Nov 2014 01:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/11/one-troubleshooting-for-centos-corrupt/</guid>
      <description>&lt;p&gt;首先问题产生的缘由很简单，是我一同事在安装oracle一套软件时，按照要求需要binutils软件包的32位版本，然而在Oracle Linux已经装有64位，按理说是可以安装i686的，我猜应该是32位的版本低于这个已有的64位所以导致冲突而安装失败，因此同事就用&lt;code&gt;yum remove binutils&lt;/code&gt;，这个命令也奇葩，由于是root权限导致依赖于它的200多个软件包也被卸载，最终导致网络断开，系统崩溃，在vSphere虚拟机上重新启动发现再也起不来。下面看问题：&lt;/p&gt;</description>
    </item>
    <item>
      <title>在 CentOS 6.x上安装 docker.io成功</title>
      <link>http://localhost:1313/2014/10/docker-installed-centos6-successfully/</link>
      <pubDate>Sun, 26 Oct 2014 19:45:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/10/docker-installed-centos6-successfully/</guid>
      <description>&lt;p&gt;docker是什么就不多说了，见&lt;a href=&#34;http://xgknight.com/2014/12/18/docker-introduction/&#34;&gt;docker基础原理介绍&lt;/a&gt;。
docker容器最早受到RHEL完善的支持是从最近的CentOS 7.0开始的，官方说明是只能运行于64位架构平台，内核版本为2.6.32-431及以上（即&amp;gt;=CentOS 6.5，运行docker时实际提示3.8.0及以上），升级内核请参考&lt;a href=&#34;http://xgknight.com/2014/10/24/upgrade-centos6_kernel-to-3.10.x/&#34;&gt;CentOS 6.x 内核升级（2.6.32 -&amp;gt; 3.10.58）过程记录&lt;/a&gt;
需要注意的是CentOS 6.5与7.0的安装是有一点点不同的，CentOS-6上docker的安装包叫docker-io，并且来源于Fedora epel库，这个仓库维护了大量的没有包含在发行版中的软件，所以先要安装EPEL，而CentOS-7的docker直接包含在官方镜像源的Extras仓库（CentOS-Base.repo下的[extras]节enable=1启用）。前提是都需要联网，具体安装过程如下。
###1. 禁用selinux###&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux进阶培训-tplink</title>
      <link>http://localhost:1313/2014/10/linux-level2/</link>
      <pubDate>Mon, 06 Oct 2014 16:32:49 +0000</pubDate>
      <guid>http://localhost:1313/2014/10/linux-level2/</guid>
      <description>&lt;p&gt;本文没啥实际内容，是给新人做linux培训的第二课进阶篇，主要着眼于体系，把一些工具混个眼熟。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://github.com/seanlook/sean-notes-comment/raw/main/static/linux-level2-01.PNG&#34;&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;http://github.com/seanlook/sean-notes-comment/raw/main/static/linux-level2-02.PNG&#34;&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;http://github.com/seanlook/sean-notes-comment/raw/main/static/linux-level2-03.PNG&#34;&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;http://github.com/seanlook/sean-notes-comment/raw/main/static/linux-level2-04.PNG&#34;&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;http://github.com/seanlook/sean-notes-comment/raw/main/static/linux-level2-05.PNG&#34;&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;http://github.com/seanlook/sean-notes-comment/raw/main/static/linux-level2-06.PNG&#34;&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;http://github.com/seanlook/sean-notes-comment/raw/main/static/linux-level2-07.PNG&#34;&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;http://github.com/seanlook/sean-notes-comment/raw/main/static/linux-level2-08.PNG&#34;&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;http://github.com/seanlook/sean-notes-comment/raw/main/static/linux-level2-09.PNG&#34;&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;http://github.com/seanlook/sean-notes-comment/raw/main/static/linux-level2-10.PNG&#34;&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;http://github.com/seanlook/sean-notes-comment/raw/main/static/linux-level2-11.PNG&#34;&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;http://github.com/seanlook/sean-notes-comment/raw/main/static/linux-level2-12.PNG&#34;&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;http://github.com/seanlook/sean-notes-comment/raw/main/static/linux-level2-13.PNG&#34;&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;http://github.com/seanlook/sean-notes-comment/raw/main/static/linux-level2-14.PNG&#34;&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;http://github.com/seanlook/sean-notes-comment/raw/main/static/linux-level2-15.PNG&#34;&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;http://github.com/seanlook/sean-notes-comment/raw/main/static/linux-level2-16.PNG&#34;&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;http://github.com/seanlook/sean-notes-comment/raw/main/static/linux-level2-17.PNG&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linux磁盘管理(进阶)&lt;/li&gt;
&lt;li&gt;Linux内存管理&lt;/li&gt;
&lt;li&gt;Linux进程管理(进阶)&lt;/li&gt;
&lt;li&gt;Linux网络管理(进阶)&lt;/li&gt;
&lt;li&gt;Linux系统状态监控与调优&lt;/li&gt;
&lt;li&gt;常见服务&lt;/li&gt;
&lt;li&gt;Linux安全策略&lt;/li&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linux磁盘管理进阶&#34;&gt;Linux磁盘管理（进阶）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ext4文件系统格式&lt;/li&gt;
&lt;li&gt;Inode、block、superblock、MBR&lt;/li&gt;
&lt;li&gt;VFS&lt;/li&gt;
&lt;li&gt;LVM&lt;/li&gt;
&lt;li&gt;pv、lv、vg&lt;/li&gt;
&lt;li&gt;lvdisplay、lvextend、vgdisplay、pvcreate…&lt;/li&gt;
&lt;li&gt;RAID&lt;/li&gt;
&lt;li&gt;raid0、raid1、raid5、raid10&lt;/li&gt;
&lt;li&gt;r/w速度、磁盘利用率、安全性的权衡&lt;/li&gt;
&lt;li&gt;磁盘IO性能
&lt;ul&gt;
&lt;li&gt;dd、iostat、iotop&lt;/li&gt;
&lt;li&gt;I/O等待&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linux内存管里基础&#34;&gt;Linux内存管里（基础）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;物理内存与虚拟内存&lt;/li&gt;
&lt;li&gt;Swap space，分页存取&lt;/li&gt;
&lt;li&gt;buffer与cache区分&lt;/li&gt;
&lt;li&gt;内存监控命令&lt;/li&gt;
&lt;li&gt;free、vmstat&lt;/li&gt;
&lt;li&gt;/proc文件系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linux进程管理进阶&#34;&gt;Linux进程管理（进阶）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;进程与线程&lt;/li&gt;
&lt;li&gt;进程优先级&lt;/li&gt;
&lt;li&gt;进程监控命令&lt;/li&gt;
&lt;li&gt;pidstat、lsof&lt;/li&gt;
&lt;li&gt;strace（系统调用跟踪）&lt;/li&gt;
&lt;li&gt;后台进程&lt;/li&gt;
&lt;li&gt;Ctrl+z、jobs、bg、fg、&amp;amp;、nohup&lt;/li&gt;
&lt;li&gt;screen&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linux的网络管理&#34;&gt;Linux的网络管理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一些概念&lt;/p&gt;</description>
    </item>
    <item>
      <title>在Linux上使用logwatch分析监控日志文件</title>
      <link>http://localhost:1313/2014/08/linux-logwatch-usage/</link>
      <pubDate>Sat, 23 Aug 2014 01:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/08/linux-logwatch-usage/</guid>
      <description>&lt;h1 id=&#34;1-介绍&#34;&gt;1. 介绍&lt;/h1&gt;
&lt;p&gt;在维护Linux服务器时，经常需要查看系统中各种服务的日志，以检查服务器的运行状态。 如登陆历史、邮件、软件安装等日志。系统管理员一个个去检查会十分不方便；且大多时候，这会是一种被动的检查，即只有在发现系统运行异常时才会想到去查看日志以获取异常的信息。那么如何主动、集中的分析这些日志，并产生报告，定时发送给管理员就会显得十分重要。&lt;/p&gt;</description>
    </item>
    <item>
      <title>高效Linux bash快捷键及alias总结</title>
      <link>http://localhost:1313/2014/03/linux-bash/</link>
      <pubDate>Sun, 09 Mar 2014 01:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/03/linux-bash/</guid>
      <description>&lt;h2 id=&#34;bash快捷键&#34;&gt;bash快捷键&lt;/h2&gt;
&lt;p&gt;习惯使用编辑的快捷键可以大大提高效率，记忆学习过程要有意识的忽略功能键、方向键和数字小键盘。以下快捷键适用在bash处于默认的Emacs模式下，是由一个名为Readline的库实现的，用户可以通过命令bind添加新快捷键，或者修改系统中已经存在的快捷键。（如果你有&lt;code&gt;set -o vi&lt;/code&gt;，就处于 vi 模式就不适用了）&lt;/p&gt;</description>
    </item>
    <item>
      <title>linux进程后台运行的几种方式</title>
      <link>http://localhost:1313/2014/02/linux-process-running-background-screen/</link>
      <pubDate>Thu, 20 Feb 2014 11:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/02/linux-process-running-background-screen/</guid>
      <description>&lt;h2 id=&#34;ctrlzbgnohupsetsid&#34;&gt;Ctrl+z/bg/nohup/setsid/&amp;amp;&lt;/h2&gt;
&lt;p&gt;在Linux中，如果要让进程在后台运行，一般情况下，我们在命令后面加上&amp;amp;即可，实际上，这样是将命令放入到一个作业队列中了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# ./rsync.sh &amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# jobs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;对于已经在前台执行的命令，也可以重新放到后台执行，首先按ctrl+z暂停已经运行的进程，然后使用bg命令将停止的作业放到后台运行：&lt;code&gt;bg %1&lt;/code&gt;，放回前台运行：&lt;code&gt;%1&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
