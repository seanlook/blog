<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Lsyncd，文件同步 on Sean&#39;s Note</title>
    <link>http://localhost:1313/tags/lsyncd%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5/</link>
    <description>Recent content in Lsyncd，文件同步 on Sean&#39;s Note</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 May 2015 01:21:25 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/lsyncd%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>lsyncd实时同步搭建指南——取代rsync&#43;inotify</title>
      <link>http://localhost:1313/2015/05/lsyncd-synchronize-realtime/</link>
      <pubDate>Wed, 06 May 2015 01:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2015/05/lsyncd-synchronize-realtime/</guid>
      <description>&lt;h1 id=&#34;1-几大实时同步工具比较&#34;&gt;1. 几大实时同步工具比较&lt;/h1&gt;
&lt;h2 id=&#34;11-inotify--rsync&#34;&gt;1.1 inotify + rsync&lt;/h2&gt;
&lt;p&gt;最近一直在寻求生产服务服务器上的同步替代方案，原先使用的是&lt;code&gt;inotify +  rsync&lt;/code&gt;，但随着文件数量的增大到100W+，目录下的文件列表就达20M，在网络状况不佳或者限速的情况下，变更的文件可能10来个才几M，却因此要发送的文件列表就达20M，严重减低的带宽的使用效率以及同步效率；更为要紧的是，加入inotifywait在5s内监控到10个小文件发生变化，便会触发10个rsync同步操作，结果就是真正需要传输的才2-3M的文件，比对的文件列表就达200M。使用这两个组合的好处在于，它们都是最基本的软件，可以通过不同选项做到很精确的控制，比如排除同步的目录，同步多个模块或同步到多个主机。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
