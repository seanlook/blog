<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Shell on Sean&#39;s Note</title>
    <link>http://localhost:1313/tags/shell/</link>
    <description>Recent content in Shell on Sean&#39;s Note</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Jan 2015 18:21:25 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux下rar及zip压缩包中批量替换某文件脚本</title>
      <link>http://localhost:1313/2015/01/shell-batch-replace-files-from-rar-zip/</link>
      <pubDate>Thu, 29 Jan 2015 18:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2015/01/shell-batch-replace-files-from-rar-zip/</guid>
      <description>&lt;p&gt;本需求是自己负责的一个生产系统上，有大量以zip和rar结尾的压缩文件散落在文件系统的各个文件夹，先在需要把压缩包里包含某一个特定文件（如tftpd32.exe或Tftpd32.exe，版本较旧），全都替换成比较新的tftpd32.exe版本。压缩文件总数约5000个，需要替换的数量约1500个。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Oracle单实例安装环境一键配置脚本（CentOS6 &#43; 11gR2 ）</title>
      <link>http://localhost:1313/2014/12/oracle11gr2_installation_precheck_scripts/</link>
      <pubDate>Tue, 02 Dec 2014 15:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/12/oracle11gr2_installation_precheck_scripts/</guid>
      <description>&lt;p&gt;这是自己曾经写的一个oracle 11gR2在CentOS6 x86_64服务器上，一键配置安装环境的脚本，能快速完成安装前环境的配置。&lt;/p&gt;
&lt;p&gt;具体完成以下工作：&lt;/p&gt;</description>
    </item>
    <item>
      <title>docker如何创建一个运行后台进程的容器并同时提供shell终端</title>
      <link>http://localhost:1313/2014/11/docker-run-container-with-shell-daemon_process/</link>
      <pubDate>Mon, 03 Nov 2014 20:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/11/docker-run-container-with-shell-daemon_process/</guid>
      <description>&lt;p&gt;只看标题还不是很明显，本文实现docker的这样一种比较常用的功能：通过&lt;code&gt;docker run&lt;/code&gt;启动一个容器后，容器中已经运行了一个后台进程（这里以监听80端口的nginx为例），同时进入一个shell终端可供操作，而不受限于只能在前台运行nginx与运行shell终端之间的一种。这个例子实现了，那么其他类似的运行多任务docker就可以以此类推。另外本文还提供了一种在docker容器内部安装软件（&lt;code&gt;vim&lt;/code&gt;）的方法，对于定制自己需要的镜像大有帮助。
你可能需要先阅读&lt;a href=&#34;hhttp://xgknight.com/2014/10/31/docker-command-best-use-1/&#34;&gt;docker专题(2)：docker常用管理命令（上）&lt;/a&gt;、&lt;a href=&#34;http://xgknight.com/2014/11/05/docker-command-best-use-2/&#34;&gt;docker专题(2)：docker常用管理命令（下）&lt;/a&gt;来理解更多。&lt;/p&gt;</description>
    </item>
    <item>
      <title>管理多tomcat服务shell脚本（CentOS）</title>
      <link>http://localhost:1313/2014/10/multiple-tomcats-service-script/</link>
      <pubDate>Wed, 29 Oct 2014 18:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/10/multiple-tomcats-service-script/</guid>
      <description>&lt;p&gt;该脚本改自csdn上的一个shell，忘记出处了，只记得它能够简单的通过&lt;code&gt;service tomcat [stop|start|restart]&lt;/code&gt;来方便的管理Linux服务器上的tomcat，这可以满足大部分人的需求，然而并不适合我所管理的CentOS上的tomcat应用：通过端口区分的3台tomcat集群。如果每一次管理tomcat或查看日志，都&lt;code&gt;cd /apps/test/tomcat0/log/&lt;/code&gt;然后切换到另外一个&lt;code&gt;cd ../../&lt;/code&gt;或&lt;code&gt;cd /apps/test/tomcat1/log/&lt;/code&gt;，麻烦至极。因此“懒人”创造了这个脚本&lt;code&gt;tomcat&lt;/code&gt;：&lt;/p&gt;</description>
    </item>
    <item>
      <title>linux进程后台运行的几种方式</title>
      <link>http://localhost:1313/2014/02/linux-process-running-background-screen/</link>
      <pubDate>Thu, 20 Feb 2014 11:21:25 +0000</pubDate>
      <guid>http://localhost:1313/2014/02/linux-process-running-background-screen/</guid>
      <description>&lt;h2 id=&#34;ctrlzbgnohupsetsid&#34;&gt;Ctrl+z/bg/nohup/setsid/&amp;amp;&lt;/h2&gt;
&lt;p&gt;在Linux中，如果要让进程在后台运行，一般情况下，我们在命令后面加上&amp;amp;即可，实际上，这样是将命令放入到一个作业队列中了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# ./rsync.sh &amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# jobs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;对于已经在前台执行的命令，也可以重新放到后台执行，首先按ctrl+z暂停已经运行的进程，然后使用bg命令将停止的作业放到后台运行：&lt;code&gt;bg %1&lt;/code&gt;，放回前台运行：&lt;code&gt;%1&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
